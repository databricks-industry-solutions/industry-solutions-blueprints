name: Databricks CI/CD + Simple Publish

on:
  push:
    branches: [ main, preview, fix/consistent-html-rendering ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  databricks-ci-publish:
    runs-on: html_publisher
    environment:
      name: ${{ github.ref_name == 'main' && 'github-pages' || 'preview' }}
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}

      - name: Configure Databricks CLI authentication
        run: |
          echo "[DEFAULT]" > ~/.databrickscfg
          echo "host = https://e2-demo-field-eng.cloud.databricks.com" >> ~/.databrickscfg
          echo "token = ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}" >> ~/.databrickscfg

      - name: Get or Create serverless SQL warehouse
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}
        run: |
          WAREHOUSE_NAME="Shared Unity Catalog Serverless"
          echo "Looking for warehouse named: $WAREHOUSE_NAME"
          
          EXISTING_WAREHOUSE=$(curl -s -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "$DATABRICKS_HOST/api/2.0/sql/warehouses")
          
          WAREHOUSE_ID=$(echo "$EXISTING_WAREHOUSE" | python3 -c "
          import sys, json
          import argparse

          parser = argparse.ArgumentParser()
          parser.add_argument('--name', required=True)
          args = parser.parse_args()

          try:
              data = json.load(sys.stdin)
              name = args.name
              if 'warehouses' in data:
                  warehouses = data['warehouses']
                  matching = [w for w in warehouses if w['name'] == name]
                  if matching:
                      print(matching[0]['id'])
                  else:
                      print('')
              else:
                  print('')
          except Exception as e:
              print(f'Error parsing response: {str(e)}', file=sys.stderr)
              print('')
          " --name "$WAREHOUSE_NAME")
          
          if [ -z "$WAREHOUSE_ID" ]; then
            echo "Creating new warehouse..."
            RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $DATABRICKS_TOKEN" \
              -H "Content-Type: application/json" \
              "$DATABRICKS_HOST/api/2.0/sql/warehouses" \
              -d "{
                \"name\": \"${WAREHOUSE_NAME}\",
                \"cluster_size\": \"2X-Small\",
                \"enable_serverless_compute\": true,
                \"auto_stop_mins\": 10,
                \"max_num_clusters\": 1
              }")
            
            WAREHOUSE_ID=$(echo $RESPONSE | python3 -c "import sys, json; print(json.load(sys.stdin).get('id', ''))")
          else
            echo "Found existing warehouse with ID: $WAREHOUSE_ID"
          fi
          
          if [ -z "$WAREHOUSE_ID" ]; then
            echo "Error: Failed to get warehouse ID"
            exit 1
          fi
          
          echo "Using warehouse with ID: $WAREHOUSE_ID"
          echo "WAREHOUSE_ID=$WAREHOUSE_ID" >> $GITHUB_ENV
          echo "DEPLOY_ENV=dev" >> $GITHUB_ENV

      - name: Validate bundle
        run: databricks bundle validate --var="environment=${{ env.DEPLOY_ENV }}"

      - name: Run and monitor workflow
        run: |
          echo "Starting workflow execution..."
          RUN_OUTPUT=$(databricks bundle run demo_workflow --target dev --var="environment=${{ env.DEPLOY_ENV }}" 2>&1)
          echo "$RUN_OUTPUT"
          
          RUN_ID=$(echo "$RUN_OUTPUT" | grep -o 'Run URL:.*run/[0-9]*' | grep -o '[0-9]*$' || echo "")
          if [ -z "$RUN_ID" ]; then
            echo "Could not extract run ID from output"
            exit 1
          fi
          
          echo "Extracted run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Install dependencies and export notebooks
        run: |
          pip install requests markdown
          mkdir -p site

      - name: Export notebooks from job run
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}
        run: |
          python3 << 'EOF'
          import os
          import json
          import requests
          import base64
          import markdown

          DATABRICKS_HOST = os.environ['DATABRICKS_HOST']
          DATABRICKS_TOKEN = os.environ['DATABRICKS_TOKEN']
          RUN_ID = os.environ['RUN_ID']
          headers = {'Authorization': f'Bearer {DATABRICKS_TOKEN}'}

          def get_run_details(run_id):
              response = requests.get(
                  f"{DATABRICKS_HOST}/api/2.1/jobs/runs/get",
                  headers=headers,
                  params={'run_id': run_id}
              )
              return response.json() if response.status_code == 200 else None

          def export_task_notebook(task_run_id):
              print(f"Attempting to export task run ID: {task_run_id}")
              response = requests.get(
                  f"{DATABRICKS_HOST}/api/2.0/jobs/runs/export",
                  headers=headers,
                  params={'run_id': task_run_id, 'format': 'HTML'}
              )
              print(f"Export response status: {response.status_code}")
              if response.status_code == 200:
                  data = response.json()
                  print(f"Response keys: {list(data.keys())}")
                  if 'content' in data:
                      html_content = base64.b64decode(data['content']).decode('utf-8')
                      print(f"Successfully decoded HTML content ({len(html_content)} chars)")
                      return html_content
                  else:
                      print("No 'content' key in response")
              else:
                  print(f"Export failed: {response.status_code} - {response.text}")
              return None

          def create_simple_html(notebook_name, notebook_html, all_notebooks):
              repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1]
              title = ' '.join(word.capitalize() for word in repo_name.split('-')) + ' Accelerator'
              display_name = notebook_name.replace('_', ' ').title()

              nav_links = ['<a href="index.html">ðŸ“š Overview</a>']
              for nb_name in sorted(all_notebooks):
                  nb_display = nb_name.replace('_', ' ').title()
                  active = ' style="background: #FF3621; color: white;"' if nb_name == notebook_name else ''
                  nav_links.append(f'<a href="{nb_name}.html"{active}>ðŸ““ {nb_display}</a>')

              return f'''<!DOCTYPE html>
          <html>
          <head>
              <title>{display_name} - {title}</title>
              <style>
                  body {{ 
                      font-family: system-ui, -apple-system, sans-serif;
                      margin: 0; 
                      padding: 20px; 
                      background: white;
                      line-height: 1.6;
                  }}
                  .header {{ 
                      display: flex; 
                      align-items: center; 
                      gap: 16px; 
                      padding: 16px 0; 
                      border-bottom: 2px solid #FF3621; 
                      margin-bottom: 20px;
                  }}
                  .logo {{ height: 24px; }}
                  .title {{ font-size: 24px; font-weight: 600; flex: 1; }}
                  .github-btn {{ 
                      background: #FF3621; 
                      color: white; 
                      padding: 8px 16px; 
                      border-radius: 4px; 
                      text-decoration: none; 
                      font-size: 14px;
                  }}
                  .nav {{ 
                      margin: 16px 0; 
                      display: flex; 
                      gap: 12px; 
                      flex-wrap: wrap; 
                  }}
                  .nav a {{ 
                      padding: 8px 12px; 
                      text-decoration: none; 
                      background: #f5f5f5; 
                      border-radius: 4px; 
                      font-size: 14px;
                      color: #333;
                  }}
                  .nav a:hover {{ background: #e5e5e5; }}
                  .progress, [class*="loading"], [class*="spinner"] {{ display: none !important; }}
              </style>
          </head>
          <body>
              <div class="header">
                  <img src="https://databricks.com/wp-content/uploads/2021/10/db-nav-logo.svg" 
                       class="logo" alt="Databricks">
                  <div class="title">{title}</div>
                  <a href="{os.environ.get('GITHUB_SERVER_URL', '')}/{os.environ.get('GITHUB_REPOSITORY', '')}" 
                     class="github-btn">View on GitHub</a>
              </div>
              <nav class="nav">
                  {' '.join(nav_links)}
              </nav>
              <div>
                  {notebook_html}
              </div>
          </body>
          </html>'''

          # Get run details
          print(f"Getting details for run ID: {RUN_ID}")
          run_details = get_run_details(RUN_ID)
          if not run_details:
              print("Failed to get run details")
              exit(1)

          # Find notebook tasks
          notebook_tasks = []
          print("Analyzing tasks from run details:")
          for i, task in enumerate(run_details.get('tasks', [])):
              task_key = task.get('task_key', '')
              task_run_id = task.get('run_id')
              has_notebook_task = bool(task.get('notebook_task'))
              print(f"Task {i}: key='{task_key}', run_id='{task_run_id}', has_notebook_task={has_notebook_task}")
              print(f"  All task keys: {list(task.keys())}")
              if task.get('notebook_task') and task_run_id:
                  notebook_tasks.append({'name': task_key, 'run_id': task_run_id})
                  print(f"  âœ“ Added to notebook_tasks")

          print(f"Found {len(notebook_tasks)} notebook tasks")
          if not notebook_tasks:
              print("No notebook tasks found")
              print("Full run details:")
              print(json.dumps(run_details, indent=2))
              exit(1)

          # Export each notebook
          exported_notebooks = []
          all_names = [nb['name'] for nb in notebook_tasks]
          
          for nb in notebook_tasks:
              print(f"Exporting {nb['name']}...")
              html = export_task_notebook(nb['run_id'])
              if html:
                  wrapped = create_simple_html(nb['name'], html, all_names)
                  with open(f"site/{nb['name']}.html", 'w', encoding='utf-8') as f:
                      f.write(wrapped)
                  exported_notebooks.append(nb['name'])
                  print(f"âœ“ Exported {nb['name']}.html")

          # Create index page
          readme_content = ""
          if os.path.exists('README.md'):
              with open('README.md', 'r') as f:
                  readme_content = markdown.markdown(f.read())

          repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1]
          title = ' '.join(word.capitalize() for word in repo_name.split('-')) + ' Accelerator'

          nav_links = ['<a href="index.html" style="background: #FF3621; color: white;">ðŸ“š Overview</a>']
          for nb_name in exported_notebooks:
              nb_display = nb_name.replace('_', ' ').title()
              nav_links.append(f'<a href="{nb_name}.html">ðŸ““ {nb_display}</a>')

          index_html = f'''<!DOCTYPE html>
          <html>
          <head>
              <title>{title}</title>
              <style>
                  body {{ font-family: system-ui, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }}
                  .header {{ display: flex; align-items: center; gap: 16px; padding: 16px 0; 
                            border-bottom: 2px solid #FF3621; margin-bottom: 20px; }}
                  .logo {{ height: 24px; }}
                  .title {{ font-size: 24px; font-weight: 600; flex: 1; }}
                  .nav {{ margin: 16px 0; display: flex; gap: 12px; flex-wrap: wrap; }}
                  .nav a {{ padding: 8px 12px; text-decoration: none; background: #f5f5f5; 
                           border-radius: 4px; font-size: 14px; color: #333; }}
                  .nav a:hover {{ background: #e5e5e5; }}
              </style>
          </head>
          <body>
              <div class="header">
                  <img src="https://databricks.com/wp-content/uploads/2021/10/db-nav-logo.svg" 
                       class="logo" alt="Databricks">
                  <div class="title">{title}</div>
                  <a href="{os.environ.get('GITHUB_SERVER_URL', '')}/{os.environ.get('GITHUB_REPOSITORY', '')}" 
                     style="background: #FF3621; color: white; padding: 8px 16px; border-radius: 4px; 
                            text-decoration: none; font-size: 14px;">View on GitHub</a>
              </div>
              <nav class="nav">
                  {' '.join(nav_links)}
              </nav>
              <div>
                  {readme_content}
              </div>
          </body>
          </html>'''

          with open('site/index.html', 'w', encoding='utf-8') as f:
              f.write(index_html)

          print(f"âœ“ Created index.html with {len(exported_notebooks)} notebooks")
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4