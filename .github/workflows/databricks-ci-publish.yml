name: Databricks CI/CD + Publish

on:
  push:
    branches: [ main, preview, fix/consistent-html-rendering ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  databricks-ci-publish:
    runs-on: html_publisher
    environment:
      name: ${{ github.ref_name == 'main' && 'github-pages' || 'preview' }}
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # Phase 1: Databricks CI/CD (from databricks-ci.yml)
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}

      - name: Configure Databricks CLI authentication
        run: |
          echo "[DEFAULT]" > ~/.databrickscfg
          echo "host = https://e2-demo-field-eng.cloud.databricks.com" >> ~/.databrickscfg
          echo "token = ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}" >> ~/.databrickscfg

      - name: Get or Create serverless SQL warehouse
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}
        run: |
          WAREHOUSE_NAME="Shared Unity Catalog Serverless"
          echo "Looking for warehouse named: $WAREHOUSE_NAME"
          
          echo "Fetching existing warehouses..."
          EXISTING_WAREHOUSE=$(curl -s -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "$DATABRICKS_HOST/api/2.0/sql/warehouses")
          
          echo "Warehouse List Response: $(echo $EXISTING_WAREHOUSE | sed 's/"token":"[^"]*"/"token":"***"/g')"
          
          WAREHOUSE_ID=$(echo "$EXISTING_WAREHOUSE" | python3 -c "
          import sys, json
          import argparse

          parser = argparse.ArgumentParser()
          parser.add_argument('--name', required=True)
          args = parser.parse_args()

          try:
              data = json.load(sys.stdin)
              name = args.name
              if 'warehouses' in data:
                  warehouses = data['warehouses']
                  matching = [w for w in warehouses if w['name'] == name]
                  if matching:
                      print(matching[0]['id'])
                  else:
                      print('')
              else:
                  print('')
          except Exception as e:
              print(f'Error parsing response: {str(e)}', file=sys.stderr)
              print('')
          " --name "$WAREHOUSE_NAME")
          
          if [ -z "$WAREHOUSE_ID" ]; then
            echo "Creating new warehouse..."
            RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $DATABRICKS_TOKEN" \
              -H "Content-Type: application/json" \
              "$DATABRICKS_HOST/api/2.0/sql/warehouses" \
              -d "{
                \"name\": \"${WAREHOUSE_NAME}\",
                \"cluster_size\": \"2X-Small\",
                \"enable_serverless_compute\": true,
                \"auto_stop_mins\": 10,
                \"max_num_clusters\": 1
              }")
            
            echo "Create API Response: $(echo $RESPONSE | sed 's/"token":"[^"]*"/"token":"***"/g')"
            WAREHOUSE_ID=$(echo $RESPONSE | python3 -c "import sys, json; print(json.load(sys.stdin).get('id', ''))")
          else
            echo "Found existing warehouse with ID: $WAREHOUSE_ID"
          fi
          
          if [ -z "$WAREHOUSE_ID" ]; then
            echo "Error: Failed to get warehouse ID"
            exit 1
          fi
          
          echo "Using warehouse with ID: $WAREHOUSE_ID"
          echo "WAREHOUSE_ID=$WAREHOUSE_ID" >> $GITHUB_ENV
          echo "DEPLOY_ENV=dev" >> $GITHUB_ENV

      - name: Validate bundle
        run: databricks bundle validate --var="environment=${{ env.DEPLOY_ENV }}"

      - name: Run Databricks workflow
        run: |
          echo "Starting workflow execution..."
          databricks bundle run demo_workflow --target dev --var="environment=${{ env.DEPLOY_ENV }}"

      # Phase 2: Export executed notebooks and publish
      - name: Install additional dependencies
        run: |
          pip install --upgrade pip
          pip install requests markdown pyyaml

      - name: Export notebooks from Databricks and create site
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}
        run: |
          mkdir -p site
          
          python3 << 'EOF'
          import os
          import json
          import requests
          import re
          import base64
          import yaml
          import markdown
          from pathlib import Path

          # Configuration
          DATABRICKS_HOST = os.environ['DATABRICKS_HOST']
          DATABRICKS_TOKEN = os.environ['DATABRICKS_TOKEN']
          headers = {'Authorization': f'Bearer {DATABRICKS_TOKEN}'}

          # Databricks brand colors
          COLORS = {
              'primary': '#FF3621',
              'text': '#1B3139',
              'bg': '#FFFFFF',
              'light_bg': '#F5F5F5',
              'border': '#E3E3E3'
          }

          def get_current_user():
              """Get current workspace user"""
              response = requests.get(f"{DATABRICKS_HOST}/api/2.0/preview/scim/v2/Me", headers=headers)
              if response.status_code == 200:
                  return response.json()['userName']
              return 'unknown'

          def parse_databricks_yml():
              """Parse databricks.yml to find notebooks in jobs"""
              with open('databricks.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              bundle_name = config.get('bundle', {}).get('name', 'unknown')
              notebooks = []
              
              jobs = config.get('resources', {}).get('jobs', {})
              for job_name, job_config in jobs.items():
                  tasks = job_config.get('tasks', [])
                  for task in tasks:
                      notebook_task = task.get('notebook_task', {})
                      if 'notebook_path' in notebook_task:
                          notebook_path = notebook_task['notebook_path']
                          # Remove leading ./ if present
                          if notebook_path.startswith('./'):
                              notebook_path = notebook_path[2:]
                          notebooks.append(notebook_path)
              
              return bundle_name, notebooks

          def export_notebook_html(workspace_path):
              """Export notebook HTML with outputs from Databricks"""
              response = requests.get(
                  f"{DATABRICKS_HOST}/api/2.0/workspace/export",
                  headers=headers,
                  params={
                      'path': workspace_path,
                      'format': 'HTML'
                  }
              )
              
              if response.status_code == 200:
                  data = response.json()
                  html_content = base64.b64decode(data['content']).decode('utf-8')
                  return html_content
              else:
                  print(f"Failed to export {workspace_path}: {response.status_code} - {response.text}")
                  return None

          def create_wrapped_html(notebook_name, notebook_html, all_notebooks):
              """Wrap notebook HTML with consistent branding"""
              # Extract body content from Databricks export
              body_match = re.search(r'<body[^>]*>(.*?)</body>', notebook_html, re.DOTALL)
              body_content = body_match.group(1) if body_match else notebook_html
              
              # Get repository info
              repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1]
              title = ' '.join(word.capitalize() for word in repo_name.split('-')) + ' Accelerator'
              display_name = os.path.basename(notebook_name).replace('_', ' ').title()
              if display_name.endswith('.Py'):
                  display_name = display_name[:-3]
              elif display_name.endswith('.Ipynb'):
                  display_name = display_name[:-6]

              html = f'''<!DOCTYPE html>
          <html>
          <head>
              <title>{display_name} - {title}</title>
              <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
              <style>
                  * {{ box-sizing: border-box; }}
                  
                  body {{
                      font-family: 'DM Sans', -apple-system, BlinkMacSystemFont, sans-serif !important;
                      margin: 0;
                      padding: 0;
                      background: {COLORS['bg']};
                      color: {COLORS['text']};
                      font-size: 14px;
                      line-height: 1.6;
                  }}
                  
                  .header {{
                      background: {COLORS['bg']};
                      padding: 20px 40px;
                      border-bottom: 1px solid {COLORS['border']};
                      display: flex;
                      align-items: center;
                      gap: 20px;
                      position: fixed;
                      top: 0;
                      width: 100%;
                      z-index: 1000;
                  }}
                  
                  .logo {{ height: 24px; }}
                  
                  .title {{
                      font-size: 24px;
                      font-weight: 600;
                      flex: 1;
                      text-align: center;
                      color: {COLORS['text']};
                  }}
                  
                  .github-link {{
                      background: {COLORS['light_bg']};
                      padding: 8px 16px;
                      border-radius: 6px;
                      text-decoration: none;
                      color: {COLORS['text']};
                      font-weight: 500;
                      transition: all 0.2s;
                  }}
                  
                  .github-link:hover {{ background: {COLORS['border']}; }}
                  
                  .main-container {{
                      display: flex;
                      margin-top: 80px;
                      min-height: calc(100vh - 80px);
                  }}
                  
                  .sidebar {{
                      width: 280px;
                      background: {COLORS['light_bg']};
                      padding: 30px 20px;
                      position: fixed;
                      left: 0;
                      top: 80px;
                      height: calc(100vh - 80px);
                      overflow-y: auto;
                  }}
                  
                  .sidebar h3 {{
                      font-size: 16px;
                      font-weight: 600;
                      margin: 0 0 20px 12px;
                      color: {COLORS['text']};
                  }}
                  
                  .content {{
                      flex: 1;
                      padding: 20px;
                      margin-left: 280px;
                  }}
                  
                  .notebook-container {{
                      background: {COLORS['bg']};
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                      padding: 40px;
                      margin: 0 auto;
                      max-width: 1200px;
                  }}
                  
                  .nav-link {{
                      display: block;
                      padding: 10px 12px;
                      margin: 4px 0;
                      text-decoration: none;
                      color: {COLORS['text']};
                      border-radius: 4px;
                      font-weight: 400;
                      transition: all 0.2s;
                  }}
                  
                  .nav-link:hover {{ background: {COLORS['bg']}; }}
                  
                  .nav-link.active {{
                      background: {COLORS['primary']};
                      color: {COLORS['bg']};
                      font-weight: 500;
                  }}
                  
                  /* Ensure Databricks content maintains styling */
                  .notebook-container h1,
                  .notebook-container h2,
                  .notebook-container h3,
                  .notebook-container h4,
                  .notebook-container h5,
                  .notebook-container h6 {{
                      font-family: 'DM Sans', sans-serif !important;
                      color: {COLORS['text']} !important;
                      font-weight: 600 !important;
                  }}
                  
                  .notebook-container p,
                  .notebook-container div,
                  .notebook-container span {{
                      font-family: 'DM Sans', sans-serif !important;
                  }}
                  
                  /* Preserve output formatting */
                  .ansiout,
                  .output_area,
                  div[class*="output"],
                  pre {{
                      font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;
                      background: {COLORS['light_bg']} !important;
                      border: 1px solid {COLORS['border']} !important;
                      border-radius: 4px !important;
                      padding: 10px !important;
                      margin: 10px 0 !important;
                      overflow-x: auto !important;
                  }}
                  
                  /* Tables */
                  .notebook-container table {{
                      border-collapse: collapse;
                      margin: 16px 0;
                      font-family: 'DM Sans', sans-serif !important;
                      width: 100%;
                  }}
                  
                  .notebook-container th,
                  .notebook-container td {{
                      border: 1px solid {COLORS['border']};
                      padding: 8px 12px;
                      text-align: left;
                  }}
                  
                  .notebook-container th {{
                      background: {COLORS['light_bg']};
                      font-weight: 600;
                  }}
              </style>
          </head>
          <body>
              <div class="header">
                  <img src="https://databricks-prod-cloudfront.cloud.databricks.com/static/811f68f9f55e3a5330b6e6ae1e54c07fc5ec7224f15be529de3400226e2eca3a/db-nav-logo.svg" 
                       class="logo" alt="Databricks">
                  <div class="title">{title}</div>
                  <a href="{os.environ.get('GITHUB_SERVER_URL', '')}/{os.environ.get('GITHUB_REPOSITORY', '')}" 
                     class="github-link">View on GitHub</a>
              </div>
              <div class="main-container">
                  <div class="sidebar">
                      <h3>📚 Documentation</h3>
                      <a href="index.html" class="nav-link">Overview</a>
                      <h3 style="margin-top: 30px;">📓 Notebooks</h3>
          '''
              
              # Add notebook links
              for nb_path in sorted(all_notebooks):
                  nb_name = os.path.basename(nb_path)
                  if nb_name.endswith('.py'):
                      nb_name = nb_name[:-3]
                  elif nb_name.endswith('.ipynb'):
                      nb_name = nb_name[:-6]
                  
                  safe_name = nb_name.replace(' ', '_').lower()
                  nb_display = nb_name.replace('_', ' ').title()
                  active = 'active' if nb_path == notebook_name else ''
                  html += f'            <a href="{safe_name}.html" class="nav-link {active}">{nb_display}</a>\n'
              
              html += f'''
                  </div>
                  <div class="content">
                      <div class="notebook-container">
                          {body_content}
                      </div>
                  </div>
              </div>
          </body>
          </html>'''
              
              return html

          # Main execution
          try:
              # Get workspace info
              current_user = get_current_user()
              print(f"Current user: {current_user}")
              
              # Parse databricks.yml
              bundle_name, notebooks = parse_databricks_yml()
              print(f"Bundle name: {bundle_name}")
              print(f"Found {len(notebooks)} notebooks: {notebooks}")
              
              # Export notebooks
              exported_notebooks = []
              for notebook_path in notebooks:
                  # Construct workspace path
                  workspace_path = f"/Users/{current_user}/{bundle_name}-dev/{notebook_path}"
                  print(f"Exporting from workspace path: {workspace_path}")
                  
                  # Export HTML
                  html_content = export_notebook_html(workspace_path)
                  if html_content:
                      # Create wrapped HTML
                      wrapped_html = create_wrapped_html(notebook_path, html_content, notebooks)
                      
                      # Save to file
                      notebook_name = os.path.basename(notebook_path)
                      if notebook_name.endswith('.py'):
                          notebook_name = notebook_name[:-3]
                      elif notebook_name.endswith('.ipynb'):
                          notebook_name = notebook_name[:-6]
                      
                      safe_name = notebook_name.replace(' ', '_').lower()
                      output_path = f"site/{safe_name}.html"
                      
                      with open(output_path, 'w') as f:
                          f.write(wrapped_html)
                      
                      exported_notebooks.append(notebook_path)
                      print(f"Successfully exported {notebook_path} to {output_path}")
                  else:
                      print(f"Failed to export {notebook_path}")
              
              # Create index.html
              readme_content = ""
              if os.path.exists('README.md'):
                  with open('README.md', 'r') as f:
                      readme_content = markdown.markdown(f.read())
              
              repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1]
              title = ' '.join(word.capitalize() for word in repo_name.split('-')) + ' Accelerator'
              
              index_html = f'''<!DOCTYPE html>
          <html>
          <head>
              <title>{title}</title>
              <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
              <style>
                  body {{
                      font-family: 'DM Sans', sans-serif;
                      margin: 0;
                      padding: 0;
                      background: {COLORS['bg']};
                      color: {COLORS['text']};
                  }}
                  
                  .header {{
                      background: {COLORS['bg']};
                      padding: 20px 40px;
                      border-bottom: 1px solid {COLORS['border']};
                      display: flex;
                      align-items: center;
                      gap: 20px;
                      position: fixed;
                      top: 0;
                      width: 100%;
                      z-index: 1000;
                  }}
                  
                  .logo {{ height: 24px; }}
                  
                  .title {{
                      font-size: 24px;
                      font-weight: 600;
                      flex: 1;
                      text-align: center;
                      color: {COLORS['text']};
                  }}
                  
                  .github-link {{
                      background: {COLORS['light_bg']};
                      padding: 8px 16px;
                      border-radius: 6px;
                      text-decoration: none;
                      color: {COLORS['text']};
                      font-weight: 500;
                      transition: all 0.2s;
                  }}
                  
                  .github-link:hover {{ background: {COLORS['border']}; }}
                  
                  .main-container {{
                      display: flex;
                      margin-top: 80px;
                      min-height: calc(100vh - 80px);
                  }}
                  
                  .sidebar {{
                      width: 280px;
                      background: {COLORS['light_bg']};
                      padding: 30px 20px;
                      position: fixed;
                      left: 0;
                      top: 80px;
                      height: calc(100vh - 80px);
                      overflow-y: auto;
                  }}
                  
                  .sidebar h3 {{
                      font-size: 16px;
                      font-weight: 600;
                      margin: 0 0 20px 12px;
                      color: {COLORS['text']};
                  }}
                  
                  .content {{
                      flex: 1;
                      padding: 20px;
                      margin-left: 280px;
                  }}
                  
                  .content-container {{
                      background: {COLORS['bg']};
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                      margin: 0 auto;
                      max-width: 900px;
                  }}
                  
                  .nav-link {{
                      display: block;
                      padding: 10px 12px;
                      margin: 4px 0;
                      text-decoration: none;
                      color: {COLORS['text']};
                      border-radius: 4px;
                      font-weight: 400;
                      transition: all 0.2s;
                  }}
                  
                  .nav-link:hover {{ background: {COLORS['bg']}; }}
                  
                  .nav-link.active {{
                      background: {COLORS['primary']};
                      color: {COLORS['bg']};
                      font-weight: 500;
                  }}
                  
                  h1, h2, h3 {{ color: {COLORS['text']}; font-weight: 600; }}
                  h1 {{ font-size: 32px; margin: 0 0 24px 0; }}
                  h2 {{ font-size: 24px; margin: 32px 0 16px 0; }}
                  h3 {{ font-size: 18px; margin: 24px 0 12px 0; }}
                  p {{ line-height: 1.6; margin: 0 0 16px 0; }}
                  code {{
                      background: {COLORS['light_bg']};
                      padding: 2px 6px;
                      border-radius: 3px;
                      font-family: 'Monaco', 'Consolas', monospace;
                      font-size: 14px;
                  }}
                  pre {{
                      background: {COLORS['light_bg']};
                      padding: 16px;
                      border-radius: 6px;
                      overflow-x: auto;
                      margin: 16px 0;
                  }}
                  ul, ol {{ margin: 0 0 16px 0; padding-left: 24px; line-height: 1.6; }}
                  a {{ color: {COLORS['primary']}; text-decoration: none; }}
                  a:hover {{ text-decoration: underline; }}
              </style>
          </head>
          <body>
              <div class="header">
                  <img src="https://databricks-prod-cloudfront.cloud.databricks.com/static/811f68f9f55e3a5330b6e6ae1e54c07fc5ec7224f15be529de3400226e2eca3a/db-nav-logo.svg" 
                       class="logo" alt="Databricks">
                  <div class="title">{title}</div>
                  <a href="{os.environ.get('GITHUB_SERVER_URL', '')}/{os.environ.get('GITHUB_REPOSITORY', '')}" 
                     class="github-link">View on GitHub</a>
              </div>
              <div class="main-container">
                  <div class="sidebar">
                      <h3>📚 Documentation</h3>
                      <a href="index.html" class="nav-link active">Overview</a>
          '''
              
              if exported_notebooks:
                  index_html += '            <h3 style="margin-top: 30px;">📓 Notebooks</h3>\n'
                  for nb_path in sorted(exported_notebooks):
                      nb_name = os.path.basename(nb_path)
                      if nb_name.endswith('.py'):
                          nb_name = nb_name[:-3]
                      elif nb_name.endswith('.ipynb'):
                          nb_name = nb_name[:-6]
                      
                      safe_name = nb_name.replace(' ', '_').lower()
                      nb_display = nb_name.replace('_', ' ').title()
                      index_html += f'            <a href="{safe_name}.html" class="nav-link">{nb_display}</a>\n'
              
              index_html += f'''
                  </div>
                  <div class="content">
                      <div class="content-container">
                          {readme_content}
                      </div>
                  </div>
              </div>
          </body>
          </html>'''
              
              with open('site/index.html', 'w') as f:
                  f.write(index_html)
              
              print(f"Created index.html with {len(exported_notebooks)} notebooks")
              
          except Exception as e:
              print(f"Error during export: {str(e)}")
              import traceback
              traceback.print_exc()
              exit(1)
          EOF

      # Phase 3: Deploy to GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Cleanup (optional - only on PR close)
      - name: Cleanup PR deployment
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          databricks bundle destroy --target dev --var="environment=${{ env.DEPLOY_ENV }}" || true